import React, { useState } from 'react';

function SoilAdvisor() {
  const [soil, setSoil] = useState({
    type: '',
    ph: '',
    moisture: '',
  });

  const [suggestion, setSuggestion] = useState(null);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setSoil(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Basic mock logic тАУ replace with real AI later
    if (soil.type === 'ржПрж▓рзБржнрж┐ржпрж╝рж╛рж▓' && soil.ph >= 6 && soil.ph <= 7.5) {
      setSuggestion({
        crops: ['ржзрж╛ржи', 'ржкрж╛ржЯ', 'ржЧржо'],
        advice: 'ржЖржкржирж╛рж░ ржорж╛ржЯрж┐ ржлрж╕рж▓ ржЪрж╛рж╖рзЗрж░ ржЬржирзНржп ржЕрждрзНржпржирзНржд ржЙржкржпрзЛржЧрзАред ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржУ рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред',
      });
    } else if (soil.type === 'рж▓рзЗржЯрж╛рж░рж╛ржЗржЯ' || soil.ph < 5.5) {
      setSuggestion({
        crops: ['ржЖржирж╛рж░рж╕', 'ржХрж▓рж╛', 'ржЖржжрж╛'],
        advice: 'ржорж╛ржЯрж┐ ржХрж┐ржЫрзБржЯрж╛ ржЕржорзНрж▓рзАржпрж╝ред ржлрж▓ржЬрж╛рждрзАржпрж╝ ржлрж╕рж▓ ржнрж╛рж▓рзЛ ржлрж▓ ржжрж┐ржмрзЗред ржЪрзБржи ржкрзНрж░ржпрж╝рзЛржЧрзЗ ржкрж┐ржПржЗржЪ ржЙржирзНржиржпрж╝ржи рж╕ржорзНржнржмред',
      });
    } else {
      setSuggestion({
        crops: ['рж╢рж╛ржХрж╕ржмржЬрж┐', 'ржорж╕рзБрж░', 'рж╕рж░рж┐рж╖рж╛'],
        advice: 'ржорж╛ржЯрж┐рж░ ржзрж░ржи ржУ ржЖрж░рзНржжрзНрж░рждрж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржПржЗ ржлрж╕рж▓ржЧрзБрж▓рзЛ ржЙржкржпрзБржХрзНржд рж╣рждрзЗ ржкрж╛рж░рзЗред',
      });
    }
  };

  return (
    <div className="max-w-xl mx-auto p-6">
      <h2 className="text-xl font-bold text-green-700 text-center mb-4">
        ЁЯзк ржорж╛ржЯрж┐рж░ рждржерзНржп ржжрж┐ржи ржУ AI ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржи
      </h2>

      <form onSubmit={handleSubmit} className="bg-white p-4 rounded-xl shadow-md space-y-4">
        <div>
          <label className="block mb-1 text-sm font-medium">ржорж╛ржЯрж┐рж░ ржзрж░ржи</label>
          <select
            name="type"
            required
            onChange={handleChange}
            className="w-full border px-3 py-2 rounded-md"
          >
            <option value="">-- ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи --</option>
            <option value="ржПрж▓рзБржнрж┐ржпрж╝рж╛рж▓">ржПрж▓рзБржнрж┐ржпрж╝рж╛рж▓</option>
            <option value="рж▓рзЗржЯрж╛рж░рж╛ржЗржЯ">рж▓рзЗржЯрж╛рж░рж╛ржЗржЯ</option>
            <option value="ржХрж╛рж▓рзЛ ржорж╛ржЯрж┐">ржХрж╛рж▓рзЛ ржорж╛ржЯрж┐</option>
            <option value="ржмрзЗрж▓рзЗ ржорж╛ржЯрж┐">ржмрзЗрж▓рзЗ ржорж╛ржЯрж┐</option>
          </select>
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium">ржорж╛ржЯрж┐рж░ pH (ржЙржжрж╛рж╣рж░ржг: 6.5)</label>
          <input
            type="number"
            step="0.1"
            name="ph"
            required
            onChange={handleChange}
            className="w-full border px-3 py-2 rounded-md"
          />
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium">ржЖрж░рзНржжрзНрж░рждрж╛ (рж╢рждржХрж░рж╛ %)</label>
          <input
            type="number"
            name="moisture"
            required
            onChange={handleChange}
            className="w-full border px-3 py-2 rounded-md"
          />
        </div>

        <button
          type="submit"
          className="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700 transition"
        >
          ЁЯМ╛ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржЦрзБржи
        </button>
      </form>

      {suggestion && (
        <div className="mt-6 bg-green-50 border-l-4 border-green-600 p-4 rounded text-green-800">
          <h3 className="font-bold text-lg mb-1">тЬЕ ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржлрж╕рж▓:</h3>
          <ul className="list-disc list-inside text-sm mb-2">
            {suggestion.crops.map((crop, idx) => (
              <li key={idx}>{crop}</li>
            ))}
          </ul>
          <p className="text-sm">{suggestion.advice}</p>
        </div>
      )}
    </div>
  );
}

export default SoilAdvisor;
